---
description: 
globs: 
alwaysApply: true
---
# UI and Technology Guidelines

## Styling with shadcn/ui and Tailwind CSS

All components should use shadcn/ui and Tailwind CSS for consistent, modern styling:

- Use the shadcn/ui component library for core UI elements
- Follow a cohesive color scheme with theme configuration
- Utilize Tailwind's utility classes for additional styling
- Ensure responsive design across all screen sizes

```tsx
// Example of a form component using shadcn/ui and Tailwind CSS
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export function TransactionForm() {
  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-xl font-semibold">Add Transaction</CardTitle>
      </CardHeader>
      <CardContent>
        <form className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="description" className="text-sm font-medium">Description</label>
            <Input id="description" placeholder="Enter transaction description" />
          </div>
          <div className="space-y-2">
            <label htmlFor="amount" className="text-sm font-medium">Amount</label>
            <Input id="amount" type="number" placeholder="0.00" />
          </div>
          <Button type="submit" className="w-full">Add Transaction</Button>
        </form>
      </CardContent>
    </Card>
  );
}
```

## Form Handling with React Hook Form and Zod

All forms should use React Hook Form with Zod for validation:

- Create Zod schemas for all form data structures
- Use React Hook Form for state management and validation
- Implement proper error handling and user feedback

```tsx
// Example form with React Hook Form and Zod
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

const transactionSchema = z.object({
  description: z.string().min(3, "Description must be at least 3 characters"),
  amount: z.number().min(0.01, "Amount must be greater than 0"),
  category: z.string().min(1, "Please select a category"),
  date: z.date(),
});

type TransactionFormValues = z.infer<typeof transactionSchema>;

export function TransactionForm() {
  const form = useForm<TransactionFormValues>({
    resolver: zodResolver(transactionSchema),
    defaultValues: {
      description: "",
      amount: 0,
      category: "",
      date: new Date(),
    },
  });

  function onSubmit(values: TransactionFormValues) {
    // Handle form submission
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Input placeholder="Grocery shopping" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* Other form fields */}
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
```

## Data Fetching with TanStack Query

For client-side data fetching, use TanStack Query when needed:

- Use for reactive data that needs to be refreshed periodically
- Implement proper caching strategies
- Handle loading, error, and success states

```tsx
// Example of data fetching with TanStack Query
import { useQuery } from "@tanstack/react-query";
import { getTransactions } from "@/lib/api";

export function TransactionList() {
  const { data, isLoading, error } = useQuery({
    queryKey: ["transactions"],
    queryFn: getTransactions,
  });

  if (isLoading) return <p>Loading transactions...</p>;
  if (error) return <p>Error loading transactions</p>;

  return (
    <div>
      {data.map(transaction => (
        <div key={transaction.id}>
          {transaction.description}: ${transaction.amount}
        </div>
      ))}
    </div>
  );
}
```

## Dummy Data Management

Use server-side dummy data services:

- Create realistic test data for all parts of the application
- Structure dummy data to simulate real database responses
- Implement artificial delays to simulate real network conditions

```typescript
// src/data/dummy-transactions.ts
import { Transaction } from "@/types";

export function getDummyTransactions(): Transaction[] {
  return [
    {
      id: "t1",
      description: "Grocery Store",
      amount: -120.50,
      date: new Date("2023-05-15"),
      category: "Food",
    },
    {
      id: "t2",
      description: "Salary Deposit",
      amount: 3500.00,
      date: new Date("2023-05-01"),
      category: "Income",
    },
    // More dummy transactions
  ];
}
```

